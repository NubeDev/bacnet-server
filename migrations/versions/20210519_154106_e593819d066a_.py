"""empty message

Revision ID: e593819d066a
Revises: 
Create Date: 2021-05-19 15:41:06.853457

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e593819d066a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bac_points',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('object_type', sa.Enum('analogOutput', name='pointtype'), nullable=False),
    sa.Column('object_name', sa.String(length=80), nullable=False),
    sa.Column('use_next_available_address', sa.Boolean(), nullable=False),
    sa.Column('address', sa.Integer(), nullable=True),
    sa.Column('relinquish_default', sa.Float(), nullable=False),
    sa.Column('event_state', sa.Enum('normal', 'fault', 'offnormal', 'highLimit', 'lowLimit', 'lifeSafetyAlarm', name='bacneteventstate'), nullable=False),
    sa.Column('units', sa.Enum('metersPerSecondPerSecond', 'squareMeters', 'squareCentimeters', 'squareFeet', 'squareInches', 'currency1', 'currency2', 'currency3', 'currency4', 'currency5', 'currency6', 'currency7', 'currency8', 'currency9', 'currency10', 'milliamperes', 'amperes', 'amperesPerMeter', 'amperesPerSquareMeter', 'ampereSquareMeters', 'decibels', 'decibelsMillivolt', 'decibelsVolt', 'farads', 'henrys', 'ohms', 'ohmMeters', 'ohmMeterPerSquareMeter', 'milliohms', 'kilohms', 'megohms', 'microSiemens', 'millisiemens', 'siemens', 'siemensPerMeter', 'teslas', 'volts', 'millivolts', 'kilovolts', 'megavolts', 'voltAmperes', 'kilovoltAmperes', 'megavoltAmperes', 'ampereSeconds', 'ampereSquareHours', 'voltAmpereHours', 'kilovoltAmpereHours', 'megavoltAmpereHours', 'voltAmperesReactive', 'kilovoltAmperesReactive', 'megavoltAmperesReactive', 'voltAmpereHoursReactive', 'kilovoltAmpereHoursReactive', 'megavoltAmpereHoursReactive', 'voltsPerDegreeKelvin', 'voltsPerMeter', 'voltsSquareHours', 'degreesPhase', 'powerFactor', 'webers', 'joules', 'kilojoules', 'kilojoulesPerKilogram', 'megajoules', 'joulesPerHours', 'wattHours', 'kilowattHours', 'megawattHours', 'wattHoursReactive', 'kilowattHoursReactive', 'megawattHoursReactive', 'btus', 'kiloBtus', 'megaBtus', 'therms', 'tonHours', 'joulesPerKilogramDryAir', 'kilojoulesPerKilogramDryAir', 'megajoulesPerKilogramDryAir', 'btusPerPoundDryAir', 'btusPerPound', 'joulesPerDegreeKelvin', 'kilojoulesPerDegreeKelvin', 'megajoulesPerDegreeKelvin', 'joulesPerKilogramDegreeKelvin', 'newton', 'cyclesPerHour', 'cyclesPerMinute', 'hertz', 'kilohertz', 'megahertz', 'perHour', 'gramsOfWaterPerKilogramDryAir', 'percentRelativeHumidity', 'micrometers', 'millimeters', 'centimeters', 'kilometers', 'meters', 'inches', 'feet', 'candelas', 'candelasPerSquareMeter', 'wattsPerSquareFoot', 'wattsPerSquareMeter', 'lumens', 'luxes', 'footCandles', 'milligrams', 'grams', 'kilograms', 'poundsMass', 'tons', 'gramsPerSecond', 'gramsPerMinute', 'kilogramsPerSecond', 'kilogramsPerMinute', 'kilogramsPerHour', 'poundsMassPerSecond', 'poundsMassPerMinute', 'poundsMassPerHour', 'tonsPerHour', 'milliwatts', 'watts', 'kilowatts', 'megawatts', 'btusPerHour', 'kiloBtusPerHour', 'horsepower', 'tonsRefrigeration', 'pascals', 'hectopascals', 'kilopascals', 'pascalSeconds', 'millibars', 'bars', 'poundsForcePerSquareInch', 'millimetersOfWater', 'centimetersOfWater', 'inchesOfWater', 'millimetersOfMercury', 'centimetersOfMercury', 'inchesOfMercury', 'degreesCelsius', 'degreesKelvin', 'degreesKelvinPerHour', 'degreesKelvinPerMinute', 'degreesFahrenheit', 'degreeDaysCelsius', 'degreeDaysFahrenheit', 'deltaDegreesFahrenheit', 'deltaDegreesKelvin', 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds', 'hundredthsSeconds', 'milliseconds', 'newtonMeters', 'millimetersPerSecond', 'millimetersPerMinute', 'metersPerSecond', 'metersPerMinute', 'metersPerHour', 'kilometersPerHour', 'feetPerSecond', 'feetPerMinute', 'milesPerHour', 'cubicFeet', 'cubicFeetPerDay', 'cubicMeters', 'cubicMetersPerDay', 'imperialGallons', 'milliliters', 'liters', 'usGallons', 'cubicFeetPerSecond', 'cubicFeetPerMinute', 'cubicFeetPerHour', 'cubicMetersPerSecond', 'cubicMetersPerMinute', 'cubicMetersPerHour', 'imperialGallonsPerMinute', 'millilitersPerSecond', 'litersPerSecond', 'litersPerMinute', 'litersPerHour', 'usGallonsPerMinute', 'usGallonsPerHour', 'degreesAngular', 'degreesCelsiusPerHour', 'degreesCelsiusPerMinute', 'degreesFahrenheitPerHour', 'degreesFahrenheitPerMinute', 'jouleSeconds', 'kilogramsPerCubicMeter', 'kilowattHoursPerSquareMeter', 'kilowattHoursPerSquareFoot', 'megajoulesPerSquareMeter', 'megajoulesPerSquareFoot', 'noUnits', 'newtonSeconds', 'newtonsPerMeter', 'partsPerMillion', 'partsPerBillion', 'percent', 'percentObscurationPerFoot', 'percentObscurationPerMeter', 'percentPerSecond', 'perMinute', 'perSecond', 'psiPerDegreeFahrenheit', 'radians', 'radiansPerSecond', 'revolutionsPerMinute', 'squareMetersPerNewton', 'wattsPerMeterPerDegreeKelvin', 'wattsPerSquareMeterDegreeKelvin', 'perMille', 'gramsPerGram', 'kilogramsPerKilogram', 'gramsPerKilogram', 'milligramsPerGram', 'milligramsPerKilogram', 'gramsPerMilliliter', 'gramsPerLiter', 'milligramsPerLiter', 'microgramsPerLiter', 'gramsPerCubicMeter', 'milligramsPerCubicMeter', 'microgramsPerCubicMeter', 'nanogramsPerCubicMeter', 'gramsPerCubicCentimeter', 'wattHoursPerCubicMeter', 'joulesPerCubicMeter', 'becquerels', 'kilobecquerels', 'megabecquerels', 'gray', 'milligray', 'microgray', 'sieverts', 'millisieverts', 'microsieverts', 'microsievertsPerHour', 'decibelsA', 'nephelometricTurbidityUnit', 'pH', 'gramsPerSquareMeter', 'minutesPerDegreeKelvin', name='units'), nullable=False),
    sa.Column('description', sa.String(length=120), nullable=False),
    sa.Column('enable', sa.Boolean(), nullable=False),
    sa.Column('fault', sa.Boolean(), nullable=True),
    sa.Column('data_round', sa.Integer(), nullable=True),
    sa.Column('data_offset', sa.Float(), nullable=True),
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('address'),
    sa.UniqueConstraint('address'),
    sa.UniqueConstraint('object_name'),
    sa.UniqueConstraint('object_name')
    )
    op.create_table('bac_server',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('ip', sa.String(length=80), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.String(length=80), nullable=False),
    sa.Column('local_obj_name', sa.String(length=80), nullable=False),
    sa.Column('model_name', sa.String(length=80), nullable=False),
    sa.Column('vendor_id', sa.String(length=80), nullable=False),
    sa.Column('vendor_name', sa.String(length=80), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('bac_points_store',
    sa.Column('point_uuid', sa.String(), nullable=False),
    sa.Column('present_value', sa.Float(), nullable=False),
    sa.Column('ts', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['point_uuid'], ['bac_points.uuid'], ),
    sa.PrimaryKeyConstraint('point_uuid')
    )
    op.create_table('mappings_bp_gp',
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('bacnet_point_uuid', sa.String(length=80), nullable=False),
    sa.Column('generic_point_uuid', sa.String(), nullable=False),
    sa.Column('bacnet_point_name', sa.String(length=80), nullable=False),
    sa.Column('generic_point_name', sa.String(length=80), nullable=False),
    sa.ForeignKeyConstraint(['bacnet_point_uuid'], ['bac_points.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('generic_point_uuid'),
    sa.UniqueConstraint('generic_point_uuid')
    )
    op.create_table('priority_array',
    sa.Column('point_uuid', sa.String(), nullable=False),
    sa.Column('_1', sa.Float(), nullable=True),
    sa.Column('_2', sa.Float(), nullable=True),
    sa.Column('_3', sa.Float(), nullable=True),
    sa.Column('_4', sa.Float(), nullable=True),
    sa.Column('_5', sa.Float(), nullable=True),
    sa.Column('_6', sa.Float(), nullable=True),
    sa.Column('_7', sa.Float(), nullable=True),
    sa.Column('_8', sa.Float(), nullable=True),
    sa.Column('_9', sa.Float(), nullable=True),
    sa.Column('_10', sa.Float(), nullable=True),
    sa.Column('_11', sa.Float(), nullable=True),
    sa.Column('_12', sa.Float(), nullable=True),
    sa.Column('_13', sa.Float(), nullable=True),
    sa.Column('_14', sa.Float(), nullable=True),
    sa.Column('_15', sa.Float(), nullable=True),
    sa.Column('_16', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['point_uuid'], ['bac_points.uuid'], ),
    sa.PrimaryKeyConstraint('point_uuid')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('priority_array')
    op.drop_table('mappings_bp_gp')
    op.drop_table('bac_points_store')
    op.drop_table('bac_server')
    op.drop_table('bac_points')
    # ### end Alembic commands ###
